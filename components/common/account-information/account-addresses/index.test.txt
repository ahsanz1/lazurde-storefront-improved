import React from "react";
import {
  screen,
  render,
  fireEvent,
  waitFor,
  act,
} from "@testing-library/react";
import ContextProvider, { AppContext } from "lib/context";
import AddressBook from "./index";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

jest.mock("react", () => ({
  ...(jest.requireActual("react") as object),
  useLayoutEffect: jest.requireActual("react").useEffect,
}));

const queryClient = new QueryClient();

window.HTMLElement.prototype.scrollIntoView = function () {};

const payload: any = {
  _id: "62d566fe155d160009db595e",
  isDeleted: false,
  name: "wasif hussain",
  partyType: "P",
  isActive: true,
  email: "swash99@gmail.com",
  additionalAttributes: {
    checkoutCustomerId: "cus_7uudl4szazcufjrgktctyvdvxm",
  },
  createdAt: "2022-07-18T13:58:22.758Z",
  updatedAt: "2022-07-26T08:12:16.940Z",
  __v: 0,
};

const accessToken = {
  token_type: "Bearer",
  expires_in: 3600,
  access_token:
    "eyJraWQiOiJYbkZOc1ZiTWp4cUo5bHV6UWotWkdidWNxdGxTX0V6aTNKaXdzd0VJd0JzIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULm5sWk1RU3daNXBSM0pyRm90Q1pUd3Z2WGZ3Z0JsWURnZmphai00Njl4YmMub2FyNnJyaDJjaFRxQnNiUTc2OTYiLCJpc3MiOiJodHRwczovL2Rldi1zZWN1cmUubGF6dXJkZS5jb20vb2F1dGgyL2RlZmF1bHQiLCJhdWQiOiJhcGk6Ly9kZWZhdWx0IiwiaWF0IjoxNjYwMjQwMzUxLCJleHAiOjE2NjAyNDM5NTEsImNpZCI6IjBvYXI5NTBteU9YZnFKVFZDNjk2IiwidWlkIjoiMDB1MWdwanZ6bWNVMW1Tang2OTciLCJzY3AiOlsiZW1haWwiLCJvZmZsaW5lX2FjY2VzcyIsIm9wZW5pZCIsInByb2ZpbGUiXSwiYXV0aF90aW1lIjoxNjYwMjQwMzQ3LCJmYWJyaWNVc2VySWQiOiJkZDIxNmQ2MC05NmNkLTRkMTEtYmY1Yy1kNmI5NWViODdkM2UiLCJzdWIiOiJzd2FzaDk5QGdtYWlsLmNvbSIsInVzZXJUeXBlIjoiY3VzdG9tZXIiLCJhY2NvdW50cyI6IntcIjYxYTUxMGZhMzdiYjY0MDAwOWFjZjU1ZVwiOntcInJvbGVzXCI6W10sXCJpZFwiOlwiNjFhNTEwZmEzN2JiNjQwMDA5YWNmNTVlXCIsXCJuYW1lXCI6XCJsYXp1cmRlIHN0b3JlZnJvbnRcIixcInRlbmFudElkXCI6XCI2MWE1MTBmYTM3YmI2NDAwMDlhY2Y1NWVcIixcImxvZ29VcmxcIjpudWxsfX0iLCJpZGVudGl0eVZlcnNpb24iOiJ2MiJ9.GV3wTE82GujXcTpfEGeggMKLd8bTxqplq0b-MowMyrG06xfLDLRAuwbxo7Wq7gq-rLqstsmo1TEy0GlQ8jmavCScLi_t-FIIkegBdS1zpA47ie--T2kdE9RYnstLBFKSznLALZS6bHpc08nn8z0la9lUz717jXORgyALsAp9_ewaxTVVTgO9z2naZsdzFh8CjDMazdaz6MBUv1oKIRx2QweIhrFQpZ1XOVMmvBzO7IU56h8RduWlKHO1DbF3cgOaa-x5scEXIWPpG3D0EChl5uWsY4dz-87ARUh0HdBOABWuchhJZ95siBReiXlRIGaJI1cb6GsXtpNkvA2Q4Gq01A",
  scope: "email offline_access openid profile",
  refresh_token: "QRtTAq4PHpI-jO3rpq1vgHdafkx56dS33W5mlx77yT4",
  id_token:
    "eyJraWQiOiJYbkZOc1ZiTWp4cUo5bHV6UWotWkdidWNxdGxTX0V6aTNKaXdzd0VJd0JzIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwMHUxZ3BqdnptY1UxbVNqeDY5NyIsIm5hbWUiOiJ3YXNpZiBodXNzYWluIiwiZW1haWwiOiJzd2FzaDk5QGdtYWlsLmNvbSIsInZlciI6MSwiaXNzIjoiaHR0cHM6Ly9kZXYtc2VjdXJlLmxhenVyZGUuY29tL29hdXRoMi9kZWZhdWx0IiwiYXVkIjoiMG9hcjk1MG15T1hmcUpUVkM2OTYiLCJpYXQiOjE2NjAyNDAzNTEsImV4cCI6MTY2MDI0Mzk1MSwianRpIjoiSUQueXJKU0pKWjVFNmlCVm9EZDItT2pWNW1Gckx3bEZnemFfZGdvbVRhTG1layIsImFtciI6WyJwd2QiXSwiaWRwIjoiMDBva3VlZGc4aVhONzAyUGM2OTYiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJzd2FzaDk5QGdtYWlsLmNvbSIsImF1dGhfdGltZSI6MTY2MDI0MDM0NywiYXRfaGFzaCI6InFNSGxoYUloMkY5bG84alJ6b0RyWlEifQ.z4k2AO36_ebSAq1SmixYvM9jevCLtOzvBZLJJcxilaDtlfCtfvGW0WqONo_ueGB2e5R_gqULs956pjXGEtYWiU1rIwmvdFUxrdiuLySAAxIEUwF7EivCslxIQS04HKeyHo5mOof7pnjzqY7CEp8x-Q7tDqvHT2of4qFym5oi-WM_RwfMhsjC4PqZDZa4dgY6Q5OEfmVuSpCuxU1Ir6Tifd67WVCVbvDCvscddiHqC-VFizhGH2mbhfl8Yi7mUUSOQbaAd3soEiLp7cQEFz_QQ9bAsOzvFbc-U0Ltd7dFHKiOq9XOt9DDddlf1Xnivb9huei2eWMxg8w8HQDVTeLUpA",
};

test("render addresses", async () => {
  localStorage.setItem("individualInfo", JSON.stringify(payload));
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <ContextProvider>
          <AddressBook />
        </ContextProvider>
      </QueryClientProvider>
    );
  });
});

test("no individual info test", async () => {
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <ContextProvider>
          <AddressBook />
        </ContextProvider>
      </QueryClientProvider>
    );
  });
});

test("create address function", async () => {
  localStorage.setItem("individualInfo", JSON.stringify(payload));
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <ContextProvider>
          <AddressBook />
        </ContextProvider>
      </QueryClientProvider>
    );
    const editButton = await screen.findByText(/AddNewAddress/i);
    expect(editButton).toBeInTheDocument();
    fireEvent.click(editButton);
    const titleField = screen.getAllByRole("titleField")[0];
    const nickName = screen.getByRole("nickName");
    const firstName = screen.getByRole("firstName");
    const lastName = screen.getByRole("lastName");
    const phoneNumber = screen.getByRole("phoneNumber");
    const address = screen.getByRole("address");
    // const country = screen.getAllByRole("country")[0];
    // fireEvent.click(country);
    // const governorate = screen.getAllByRole("governorate")[0];
    // fireEvent.click(governorate);
    // const city = screen.getAllByRole("city")[0];
    // fireEvent.click(city);
    fireEvent.click(titleField);
    fireEvent.change(firstName, {
      target: { value: "John" },
    });
    fireEvent.change(nickName, {
      target: { value: "New Nickname" },
    });
    fireEvent.change(lastName, {
      target: { value: "Doe" },
    });
    fireEvent.change(phoneNumber, {
      target: { value: "123456789" },
    });
    fireEvent.change(address, {
      target: { value: "123 street 456" },
    });

    fireEvent.click(screen.getByTestId("addButton"));
  });
});

test("edit address function", async () => {
  localStorage.setItem("individualInfo", JSON.stringify(payload));
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <ContextProvider>
          <AddressBook />
        </ContextProvider>
      </QueryClientProvider>
    );
    const editButton = screen.queryAllByTestId(/edit-button/i)[0];
    expect(editButton).toBeInTheDocument();
    fireEvent.click(editButton);

    fireEvent.click(screen.getByTestId("saveButton"));
  });
});

test("delete address function", async () => {
  localStorage.setItem("individualInfo", JSON.stringify(payload));
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <ContextProvider>
          <AddressBook />
        </ContextProvider>
      </QueryClientProvider>
    );

    const editButton = screen.queryAllByTestId(/edit-button/i)[1];
    expect(editButton).toBeInTheDocument();
    fireEvent.click(editButton);

    fireEvent.click(screen.getByTestId("showDelete"));
    fireEvent.click(screen.getByTestId("cancelDelete"));
    fireEvent.click(screen.getByTestId("showDelete"));
    fireEvent.click(screen.getByTestId("acceptDelete"));
  });
});

test("render arabic version", async () => {
  localStorage.setItem("individualInfo", JSON.stringify(payload));
  localStorage.setItem("auth_tokens", JSON.stringify(accessToken));
  await waitFor(async () => {
    render(
      <QueryClientProvider client={queryClient}>
        <AppContext.Provider value={{ appState: { lang: "ar" } }}>
          <AddressBook />
        </AppContext.Provider>
      </QueryClientProvider>
    );
  });
});

// test("test without props", () => {
//   render(
//     <ContextProvider>
//       <AddressBook/>
//     </ContextProvider>
//   );
//   expect(
//     screen.getByText(
//       /You currently donâ€™t have any saved payment methods. Add a payment method here to be prefilled for quicker checkout./i
//     )
//   ).toBeInTheDocument();
// });
